#!/usr/bin/env ruby
#
# Setup my super awesome dotfiles yay! This will:
#
## git submodule init && git submodule update
## symlink non-dot files and directories to their dotfile equivalent in $HOME
## exit non zero if the dot file or directory exists and is not a symlink

def git(command, *args)
  arguments = args.map {|a| a.to_s }.join(' ')
  output = %x{git #{command} #{arguments} 2>&1}

  abort output unless $?.success?
end

dir  = File.expand_path(File.dirname(__FILE__))
home = ENV['HOME']

Dir.chdir dir

git :submodule, :init
git :submodule, :update

Dir.glob(File.join(dir, '*')) do |path|
  name = File.basename(path)

  #skip dotfiles, setup and README
  next if %w[README.md setup bin].include?(name)
  next if name =~ /^\./

  dotpath  = File.join(home, ".#{name}")
  fullpath = File.join(dir, name)

  if File.symlink?(dotpath)
    linkpath = File.readlink(dotpath)

    if linkpath != fullpath
      abort "#{dotpath} is improperly symlinked to #{linkpath}"
    end
  elsif File.exists?(dotpath)
    abort "#{dotpath} exists but is not a symlink to #{dotpath}"
  else
    File.symlink(fullpath, dotpath)
  end
end

unless File.directory?(File.join(home, "bin"))
  Dir.mkdir File.join(home, "bin")
end

Dir.glob(File.join(dir, 'bin/*')) do |path|
  name = File.basename(path)

  binpath  = File.join(home, "bin/#{name}")
  fullpath = File.join(dir, "bin/#{name}")

  if File.symlink?(binpath)
    linkpath = File.readlink(binpath)

    if linkpath != fullpath
      abort "#{binpath} is improperly symlinked to #{linkpath}"
    end
  elsif File.exists?(binpath)
    abort "#{binpath} exists but is not a symlink to #{binpath}"
  else
    File.symlink(fullpath, binpath)
  end
end

exit 0
